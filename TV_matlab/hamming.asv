clear all;
close all;
clc;

%% load data
fft2c = @(x) fftshift(fft2(ifftshift(x)))/sqrt(size(x(:),1))*4;
ifft2c = @(x) fftshift(ifft2(ifftshift(x)))*sqrt(size(x(:),1))/4;

datapath = '/home/wjy/Project/fastmri_dataset/brain_T1_demo/';
dirname = dir(datapath);

%% load data
N1 = 320; N2 = 320; Nc = 16; Ns =8;
disp([datapath,dirname(3).name]);
kspace = h5read([datapath,dirname(3).name],'/kspace_central');
Maps = h5read([datapath,dirname(3).name],'/sense_central');

kData = complex(kspace(:,:,1:Nc,1),kspace(:,:,Nc+1:2*Nc,1));
maps = complex(Maps(:,:,1:Nc,1),Maps(:,:,Nc+1:2*Nc,1));
gt = abs(sum(ifft2c(kData).*conj(maps),3));

%% SNR and resolution
factor = 8;
SNR = 10;
sigma = sqrt(8)*0.12/SNR;  
reso = 4;

noise = complex(sigma*randn(N1,N2,Nc),sigma*randn(N1,N2,Nc));

%%
weight = factor*N1/(N1-32*reso)*N2/(N2-32*reso) * ones(1,N2-32*reso);
uni_mask = zeros(N1,N2);
uni_mask((16*reso+1):(N1-16*reso),(16*reso+1):(N2-16*reso)) = repmat(weight,[N1-32*reso,1]);
uni_mask = repmat(uni_mask,[1,1,Nc]);
uni_mask_dagger = uni_mask;
uni_mask_dagger(uni_mask>0) = 1./uni_mask(uni_mask>0);

%% 
N1_wd = N1 - 32*reso;
N2_wd = N2 - 32*reso;
beta = 0.5;  % Higher beta for stronger noise suppression
window = kaiser(N1_wd, beta) * kaiser(N2_wd, beta)';

mask = zeros(N1,N2);
mask((16*reso+1):(N1-16*reso),(16*reso+1):(N2-16*reso)) = window;
mask = repmat(mask,[1,1,Nc]);

recon = abs(sum(ifft2c(mask.*(kData+sqrt(uni_mask_dagger).*noise)).*conj(maps),3));
imagesc(recon);colormap(gray);axis equal;axis off;
display(norm(recon(:)-gt(:))/norm(gt(:)));