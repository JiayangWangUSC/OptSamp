clear all;
close all;
clc;

%% load data

datapath = '/home/wjy/Project/fastmri_dataset/test/';
%datapath = '/project/jhaldar_118/jiayangw/OptSamp/dataset/val/';
dirname = dir(datapath);
%data = h5read('file_brain_AXT2_200_6002217.h5','/home/wjy/Project/fastmri_dataset/test');
%kspace = h5read([datapath,dirname(3).name],'/kspace');
%kspace = complex(kspace.r,kspace.i);
%kspace = permute(kspace,[4,2,1,3]);
N1 = 384; N2 = 396; Nc = 16;

subject = [];
slice = [];

for i = 3:length(dirname)
    fname = dirname(i).name;
    kspace = h5read([datapath,fname],'/kspace');
    kspace = complex(kspace.r,kspace.i);
    kspace = permute(kspace,[4,2,1,3]);
    for snum = 1:size(kspace,1)
        subject = [subject;fname];
        slice = [slice;snum];
    end
end

datalen = length(slice);
batch_size = 8;
batch_num = datalen/batch_size;

%%
fft2c = @(x) fftshift(fft2(ifftshift(x)))/sqrt(size(x(:),1))*4;
ifft2c = @(x) fftshift(ifft2(ifftshift(x)))*sqrt(size(x(:),1))/4; 

%%
kspace = h5read([datapath,dirname(3).name],'/kspace');
kspace = complex(kspace.r,kspace.i);
kspace = permute(kspace,[4,2,1,3]);
kData = undersample(reshape(kspace(1,:,:,:),2*N1,N2,Nc))/1e-4;
R = 3;
P_M = @(x) LORAKS_operators(x,N1,N2,Nc,R,1,[]);
Ph_M = @(x) LORAKS_operators(x,N1,N2,Nc,R,-1,[]);
mm = repmat(LORAKS_operators(LORAKS_operators(ones(N1*N2,1,'like',kData)...
            ,N1,N2,1,R,1,[]),N1,N2,1,R,-1,[]), [Nc 1]);
  
beta = max(mm(:));
mm_reg = beta+mm;
mm_reg(mm_reg>max(mm(:))) = max(mm(:));
        
rank = 45;
%% reconstruction parameters initialization
sigma = 1;
noise = complex(sigma*randn(N1,N2,Nc),sigma*randn(N1,N2,Nc));
factor = 8;
weight = factor*ones(1,N2);

lambda = 0.2; % (noise_level,lambda): (0.5, 0.1)

MaxIter = 10;

%%
 kspace = h5read([datapath,dirname(3).name],'/kspace');
 kspace = complex(kspace.r,kspace.i);
 kspace = permute(kspace,[4,2,1,3]);
 kData = undersample(reshape(kspace(1,:,:,:),2*N1,N2,Nc))/1e-4;
 kMask = repmat(sqrt(weight),[N1,1,Nc]);
 usData = kMask.*kData+noise;

x = usData./kMask;
x = x(:);
AhA = kMask(:).*kMask(:) + lambda*mm_reg;
AhA_dagger = 1./AhA;

fd = kMask(:).*usData(:);

X = [];  
V = [];
K = [];

for iter = 1:MaxIter
    x_prev = x;
    MM = P_M(x);
    [pmm,S] = svd_left(MM,rank);
    MMr = Ph_M(pmm*pmm'*MM);
    x = AhA_dagger.*(fd + lambda*MMr);
    
    X(:,iter) = x;
    V(:,:,iter) = pmm;
    S = repmat(S,[1,rank])-repmat(S',[rank,1]);
    S(find(S)) = 1./(S(find(S)));
    K(:,:,iter) = S;
end
recon = x;
imr = ifft2c(reshape(recon,N1,N2,Nc));
ImR = sqrt(sum(abs(imr).^2,3));
Im = sqrt(sum(abs(ifft2c(reshape(kData,N1,N2,Nc))).^2,3));
ImN= sqrt(sum(abs(ifft2c(reshape(usData./kMask,N1,N2,Nc))).^2,3));

%%
support = zeros(N1,N2);
support(Im>0.06*max(Im(:))) = 1;
image_norm(support.*(ImN-Im))/image_norm(support.*Im)
image_norm(support.*(ImR-Im))/image_norm(support.*Im)
%%
epoch_max = 3;
step = 10;
train_loss = zeros(1,epoch_max);
for epoch = 1:epoch_max
    disp(epoch);
    loss = 0;
    for batch = 1:batch_num
        kMask = repmat(sqrt(weight),[N1,1,Nc]);
        AhA = kMask(:).*kMask(:) + lambda*mm_reg;
        AhA_dagger = AhA;
        AhA_dagger(find(AhA)) = 1./AhA(find(AhA));
        Gradient = zeros(N1,N2,batch_size);
        mse = zeros(1,batch_size);
        parfor (datanum = 1:batch_size, batch_size)
            % data load
            fname = subject(batch_size*(batch-1)+datanum,:);
            slicenum = slice(batch_size*(batch-1)+datanum);
            kspace = h5read([datapath,fname],'/kspace');
            kspace = complex(kspace.r,kspace.i);
            kspace = permute(kspace,[4,2,1,3]);
            kData = undersample(reshape(kspace(slicenum,:,:,:),2*N1,N2,Nc))/1e-4;
            
            % sample
            noise = complex(sigma*randn(N1,N2,Nc),sigma*randn(N1,N2,Nc));
            usData = kMask.*kData + noise;
        
            %recon
            fd = kMask(:).*usData(:);
            x = usData./kMask;
            x = x(:);
            
            X = [];
            V = [];
            K = [];

            for iter = 1:MaxIter
                x_prev = x;
                MM = P_M(x);
                [pmm,S] = svd_left(MM,rank);
                MMr = Ph_M(pmm*pmm'*MM);
                x = AhA_dagger.*(fd + lambda*MMr);
    
                X(:,iter) = x_prev;
                V(:,:,iter) = pmm;
                S = repmat(S,[1,rank])-repmat(S',[rank,1]);
                S(find(S)) = 1./(S(find(S)));
                K(:,:,iter) = S;
            end
            recon = x;
            imr = ifft2c(reshape(recon,N1,N2,Nc));
            ImR = sqrt(sum(abs(imr).^2,3));
            Im = sqrt(sum(abs(ifft2c(reshape(kData,N1,N2,Nc))).^2,3));
            
            support = zeros(N1,N2);
            support(Im>0.06*max(Im(:))) = 1;

            
            %% backward propagation
            Grad = 0;
            df = (support.*(ImR-Im))./Im;
            df = fft2c(repmat(df,[1,1,Nc]).*imr);
            df = df(:);
            for iter = MaxIter:-1:1
                
                W = P_M(X(:,iter));
                tempV = V(:,:,iter);
                Q = Ph_M(tempV*temp'*W);
                
                df_prev = df;
                dM = AhA_dagger.*AhA_dagger.*(2*lambda*kMask(:).*(mm_reg.*kData(:)-Q)+(mm_reg-lambda*kMask(:).*kMask(:)).*noise(:));
                Grad = Grad + complex_odot(dM,df);
                
                dX = P_M(lambda*AhA_dagger.* df_prev);
                dH = dX*W;
                
                dW1 = tempV*tempV'*dX;
                dV = (dH + dH')*tempV;
                dA = K(:,:,iter)'.*(tempV'*dV);
                dW2 = tempV*(dA+dA')*(tempV'*W);
                df = Ph_M(dW1+dW2);
        
                if iter == 1
                    dM = -noise./kMask./kMask;
                    Grad = Grad + complex_odot(dM(:),df);
                end
            end
            
            Grad = reshape(Grad,N1,N2,Nc);
            Grad = sum(real(Grad)+imag(Grad),3);
            Gradient(:,:,datanum) = Grad;
            
            mse(datanum) = image_norm(support.*(ImR-Im))^2;
    
        end
        
        Gradient = sum(sum(Gradient,3),1);
        Gradient = Gradient-mean(Gradient(:));
        Gradient = Gradient/norm(Gradient(:));

        weight = weight - step* Gradient;
        for p = 1:10
            weight(weight<1) = 1;
            weight = weight - mean(weight(:)) + factor;
        end
        weight(weight<1) = 1;
        if mod(batch,100) == 0
            disp(['epoch:',num2str(epoch),' batch:',num2str(batch),' train loss:',num2str(mean(mse))]);
        end
        loss = loss + mean(mse);
    end
    train_loss(epoch) = loss/batch_num;
end

save LORAKS_train_loss_noise0.5 train_loss
save LORAKS_mask_noise0.5 weight

%% 
function result = sigmoid(x)
    result = 1./(1+exp(-x));
end

%%
function result = even(int)
result = not(rem(int,2));
end

%%
function out = vect( in )
out = in(:);

end

%%
function [U,E] = svd_left(A, r)
% Left singular matrix of SVD (U matrix)
% parameters: matrix, rank (optional)
if nargin < 2
    [U,E] = eig(A*A'); % surprisingly, it turns out that this is generally faster than MATLAB's svd, svds, or eigs commands
    [~,idx] = sort(abs(diag(E)),'descend');
    U = U(:,idx);
    E = diag(E);
    E = E(idx);
else
    [U,E] = eig(A*A');
    [~,idx] = sort(abs(diag(E)),'descend');
    U = U(:,idx(1:r));
    E = diag(E);
    E = E(idx(1:r));
end
end

%%
function result = complex_odot(x,y)
    result = complex(real(x).*real(y),imag(x).*imag(y));
end


%% 
function result = LORAKS_operators(x, N1, N2, Nc, R, LORAKS_type, weights)
if LORAKS_type == 1     % S matrix
    x = reshape(x,N1*N2,Nc);

    [in1,in2] = meshgrid(-R:R,-R:R);
    i = find(in1.^2+in2.^2<=R^2);

    in1 = in1(i)';
    in2 = in2(i)';

    patchSize = numel(in1);

    result = zeros(patchSize,2, Nc, (N1-2*R-even(N1))*(N2-2*R-even(N2))*2,'like',x);

    k = 0;
    for i = R+1+even(N1):N1-R
        for j = R+1+even(N2):N2-R
            k = k+1;
            Ind = sub2ind([N1,N2],i+in1,j+in2);
            Indp = sub2ind([N1,N2],-i+in1+2*ceil((N1-1)/2)+2,-j+in2+2*ceil((N2-1)/2)+2);

            tmp = x(Ind,:)-x(Indp,:);
            result(:,1,:,k) = real(tmp);
            result(:,2,:,k) = -imag(tmp);

            tmp = x(Ind,:)+x(Indp,:);
            result(:,1,:,k+end/2) = imag(tmp);
            result(:,2,:,k+end/2) = real(tmp);
        end
    end

    result = reshape(result, patchSize*Nc*2,(N1-2*R-even(N1))*(N2-2*R-even(N2))*2);

elseif LORAKS_type == -1 % S^H (Hermitian adjoint of of S matrix) 
    result = zeros(N1*N2,Nc,'like',x);

    [in1,in2] = meshgrid(-R:R,-R:R);
    i = find(in1.^2+in2.^2<=R^2);

    in1 = in1(i)';
    in2 = in2(i)';
    patchSize = numel(in1);
    nPatch = (N1-2*R-even(N1))*(N2-2*R-even(N2));

    x = reshape(x, [patchSize*2, Nc, (N1-2*R-even(N1))*(N2-2*R-even(N2))*2]);

    k = 0;
    for i = R+1+even(N1):N1-R
        for j = R+1+even(N2):N2-R
            k = k+1;
            Ind = sub2ind([N1,N2],i+in1,j+in2);
            Indp = sub2ind([N1,N2],-i+in1+2*ceil((N1-1)/2)+2,-j+in2+2*ceil((N2-1)/2)+2);

            result(Ind,:) = result(Ind,:) + complex(x(1:patchSize,:,k) + x(patchSize+1:2*patchSize,:,nPatch+k), x(1:patchSize,:,nPatch+k) - x(patchSize+1:2*patchSize,:,k)); 
            result(Indp,:) = result(Indp,:) + complex( - x(1:patchSize,:,k) + x(patchSize+1:2*patchSize,:,nPatch+k), x(1:patchSize,:,nPatch+k) + x(patchSize+1:2*patchSize,:,k)); 

        end
    end

    result = vect(result);

elseif LORAKS_type == 2  % C matrix
    x = reshape(x,N1*N2,Nc);

    [in1,in2] = meshgrid(-R:R,-R:R);
    i = find(in1.^2+in2.^2<=R^2);

    in1 = in1(i)';
    in2 = in2(i)';

    patchSize = numel(in1);

    result = zeros(patchSize*Nc,(N1-2*R-even(N1))*(N2-2*R-even(N2)),'like',x);

    k = 0;
    for i = R+1+even(N1):N1-R
        for j = R+1+even(N2):N2-R
            k = k+1;
            ind = sub2ind([N1,N2],i+in1,j+in2);
            result(:,k) = vect(x(ind,:));
        end
    end

elseif LORAKS_type == -2 % C^H (Hermitian adjoint of of C matrix) 
    result = zeros(N1*N2,Nc,'like',x);

    [in1,in2] = meshgrid(-R:R,-R:R);
    i = find(in1.^2+in2.^2<=R^2);

    in1 = in1(i)';
    in2 = in2(i)';
    patchSize = numel(in1);

    k = 0;
    for i = R+1+even(N1):N1-R
        for j = R+1+even(N2):N2-R
            k = k+1;
            ind = sub2ind([N1,N2],i+in1,j+in2);
            result(ind,:) = result(ind,:)+ reshape(x(:,k),patchSize,Nc);
        end
    end
    result = vect(result);

elseif LORAKS_type == 3  % W matrix
    W1 = weights(:,:,1:Nc,1);
    W2 = weights(:,:,1:Nc,2);
    
    W1x = reshape(W1(:).*x(:),N1*N2,Nc);
    W2x = reshape(W2(:).*x(:),N1*N2,Nc);
    
    [in1,in2] = meshgrid(-R:R,-R:R);
    i = find(in1.^2+in2.^2<=R^2);

    in1 = in1(i)';
    in2 = in2(i)';

    patchSize = numel(in1);
    nPatch = (N1-2*R-even(N1))*(N2-2*R-even(N2));
    result = zeros(patchSize*Nc,(N1-2*R-even(N1))*(N2-2*R-even(N2))*2,'like',x);

    k = 0;
    for i = R+1+even(N1):N1-R
        for j = R+1+even(N2):N2-R
            k = k+1;
            ind = sub2ind([N1,N2],i+in1,j+in2);
            result(:,k) = vect(W1x(ind,:));
            result(:,nPatch+k) = vect(W2x(ind,:));
        end
    end
    
elseif LORAKS_type == -3  % W^H (Hermitian adjoint of of W matrix)
    W1 = reshape(weights(:,:,1:Nc,1),[N1*N2,Nc]);
    W2 = reshape(weights(:,:,1:Nc,2),[N1*N2,Nc]);
    
    result1 = zeros(N1*N2,Nc,'like',x);
    result2 = zeros(N1*N2,Nc,'like',x);
    
    [in1,in2] = meshgrid(-R:R,-R:R);
    i = find(in1.^2+in2.^2<=R^2);

    in1 = in1(i)';
    in2 = in2(i)';
    patchSize = numel(in1);
    nPatch = (N1-2*R-even(N1))*(N2-2*R-even(N2));

    k = 0;
    for i = R+1+even(N1):N1-R
        for j = R+1+even(N2):N2-R
            k = k+1;
            ind = sub2ind([N1,N2],i+in1,j+in2);
            result1(ind,:) = result1(ind,:)+ reshape(x(:,k),patchSize,Nc);
            result2(ind,:) = result2(ind,:)+ reshape(x(:,nPatch+k),patchSize,Nc);
        end
    end
    result = vect(conj(W1).*result1 + conj(W2).*result2);
end
end


%% 
function kspace = undersample(kspace)
    fft2c = @(x) fftshift(fft2(ifftshift(x)))/sqrt(size(x(:),1))*4;
    ifft2c = @(x) fftshift(ifft2(ifftshift(x)))*sqrt(size(x(:),1))/4;   
    im = ifft2c(kspace);
    im = im(192:575,:,:);
    kspace = fft2c(im);
end
%%
function value = image_norm(image)
    value = norm(image(:));
end